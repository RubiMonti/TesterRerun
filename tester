#!/bin/sh

echo "********************Inicio del test de rerun********************"
echo 
usage(){
	echo "Error: something was not found. README for more information"
	exit 1
}

if ! [ -x ../rerun/rerun.sh ]
then
	usage
fi
if ! [ -d src ]
then
       	usage
fi


#----------------------Test 1------------------------------
#---El programa procesa correctamente los argumentos
test1_1=$(mktemp)
test1_2=$(mktemp)
test1_3=$(mktemp)
test1_4=$(mktemp)
fstatus=OK
status=OK
../rerun/rerun.sh >$test1_1 2>$test1_1
exitcom=$?
if ! [ $exitcom -eq 1 ]
then
	fstatus=Failed
	status=Failed
elif !(cat $test1_1 | grep -i -q "usage")
then
	fstatus=Failed
	status=Failed
fi
../rerun/rerun.sh src/noname >$test1_2 2>$test1_2
exitcom=$?
if ! [ $exitcom -eq 1 ]
then 
	fstatus=Failed
	status=Failed
elif !(cat $test1_2 | grep -i -q "error")
then
	fstatus=Failed
	status=Failed
fi
../rerun/rerun.sh src/noexec_comando >$test1_3 2>$test1_3
exitcom=$?
if ! [ $exitcom -eq 1 ]
then
	fstatus=Failed
	status=Failed
elif !(ls | grep -q noexec_comando.fail)
then
	fstatus=Failed
	status=Failed
elif !(cat $test1_3 | grep -q "fail")
then
	fstatus=Failed
	status=Failed
fi
../rerun/rerun.sh src/dir_comando/ >$test1_4 2>$test1_4
exitcom=$?
if ! [ $exitcom -eq 1 ]
then 
	fstatus=Failed
	status=Failed
elif !(cat $test1_4 | grep -i -q "error")
then
	fstatus=Failed
	status=Failed
fi
../rerun/rerun.sh src/prueba_comando src/asdf_comando  >$test1_4 &
sleep 5
if !(ps axo comm | grep -q rerun.sh)
then
	fstatus=Failed
	status=Failed
fi

echo "Test 1: Analisis de argumentos: "$status
#----------------------------------------------------------

#----------------------Test 2------------------------------
#---El Script detecta si el programa se estaba ejecutando previamente
test2=$(mktemp)
status=OK
./src/alreadyexec_comando &
../rerun/rerun.sh alreadyexec_comando >$test2 2>$test2
exitcom=$?
if ! [ $exitcom -eq 1 ]
then
	fstatus=Failed
	status=Failed
elif (cat $test2 | grep -i -q "error") 
then
	fstatus=Failed
	status=Failed
fi

echo "Test 2: Comprobacion de previa ejecuci칩n:" $status
#----------------------------------------------------------

#----------------------Test 3------------------------------
#---El script tendra que salir con error en caso de que se borre el archivo mientras se ejecuta

test3=$(mktemp)
status=OK
#cmID=$(ps aux | grep deleted_comando | grep -v grep | awk '{print $2}')
#kill $cmID
cp src/alreadyexec_comando src/deleted_comando
../rerun/rerun.sh deleted_comando >$test3 2>$test3 &
sleep 1
./src/deleted_comando &
sleep 3
rm src/deleted_comando
sleep 1
if !(ls | grep -q deleted_comando.fail)
then
	fstatus=Failed
	status=Failed
elif ! [ $(cat $test3) = fail ] 
then
	fstatus=Failed
	status=Failed
fi
rm *.fail 2>/dev/null

echo "Test 3: Borrado de archivo a medio proceso:" $status
#----------------------------------------------------------

#----------------------Test 4------------------------------
#---Comprobar que el script no acaba aunque se mate el programa
test4=$(mktemp)
status=OK
cp src/alreadyexec_comando src/kill_comando
../rerun/rerun.sh kill_comando >$test4 2>$test4 &
./src/kill_comando &
cmID=$(ps aux | grep kill_comando | grep -v grep | awk '{print $2}')
psID=$(ps aux | grep rerun | grep -v grep | awk '{print $2}')
sleep 2
kill $cmID 2>/dev/null
sleep 2
if !(ps aux | grep -q $cmID)
then
	fstatus=Failed
	status=Failed
elif (ps aux | grep kill_comando | grep -v -q grep)
then
	fstatus=Failed
	status=Failed
fi

echo "Test 4: Continuidad del programa ante el proceso muerto:" $status
#----------------------------------------------------------

#-------------------Casos Especiales-----------------------
#---Comprobar que funciona con nombres raros de archivos y con algun
#--- tipo mas de casos que se podrian dar. Este se comprobar치 si 
#--- funcionan los dem치s apartados
if [ $fstatus = OK ]
then
	status=OK
	testce_1=$(mktemp)
	../rerun/rerun.sh casosesp/*  > $testce_1 2>$testce_1 &
	sleep 5
	if !(ps axo comm | grep -q rerun.sh)
	then
		fstatus="Cuidado, revisa los casos especiales"
		status=Failed
	fi
	echo "Test 5: Casos especiales:" $status
else
	echo "Test 5: Casos especiales: Failed"
fi

#---Limpiamos los procesos que no vamos a utilizar m치s para poder ejecutar
#--- el tester de nuevo en caso de necesidad
tokill=$(ps aux | grep _comando | grep -v grep | awk '{print $2}')
kill $tokill

echo 
echo "********************Resultado del test de rerun********************"
echo 
echo "Funcionalidad del script:" $fstatus

